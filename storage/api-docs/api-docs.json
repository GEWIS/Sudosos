{
    "swagger": "2.0",
    "info": {
        "title": "Sudosos",
        "version": "1.0.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/pointsofsale": {
            "get": {
                "tags": [
                    "POS"
                ],
                "summary": "Returns all points of sale.",
                "description": "Returns all points of sale.",
                "operationId": "getAllPointsOfSale",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "POS"
                ],
                "summary": "Create a new point of sale.",
                "description": "Create a new point of sale.",
                "operationId": "createPointOfSale",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Point of Sale",
                        "in": "body",
                        "description": "Model of the point of sale to store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/inputPointOfSale"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Point of sale created"
                    },
                    "400": {
                        "description": "Invalid request"
                    }
                }
            }
        },
        "/pointsofsale/{id}": {
            "get": {
                "tags": [
                    "POS"
                ],
                "summary": "Returns point of sale by id.",
                "description": "Returns a point of sale with a specified id.",
                "operationId": "getPointOfSale",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the point of sale",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Point of sale not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "POS"
                ],
                "summary": "Updates a point of sale by id.",
                "description": "Updates the point of sale.",
                "operationId": "updatePointOfSale",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "path",
                        "description": "Request body in JSON, specifies a new point of sale",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/inputPointOfSale"
                        },
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the point of sale",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Point of sale succesfully updated"
                    },
                    "400": {
                        "description": "Point of sale not valid"
                    },
                    "404": {
                        "description": "Point of sale not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "POS"
                ],
                "summary": "Delete a point of sale by id.",
                "description": "Delete a point of sale by id.",
                "operationId": "deletePointOfSale",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the point of sale",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Point of sale succesfully deleted."
                    },
                    "404": {
                        "description": "Point of sale not found."
                    }
                }
            }
        },
        "/pointsofsale/{id}/reinstate": {
            "put": {
                "tags": [
                    "POS"
                ],
                "summary": "Reinstate a point of sale by id.",
                "description": "Reinstate a point of sale by id.",
                "operationId": "reinstatePointOfSale",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the point of sale",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Point of sale succesfully reinstated"
                    },
                    "404": {
                        "description": "Point of sale not found"
                    },
                    "409": {
                        "description": "Point of sale already active."
                    }
                }
            }
        },
        "/pointsofsale/{id}/{property}": {
            "get": {
                "tags": [
                    "POS"
                ],
                "summary": "Returns a property of a point of sale by id.",
                "description": "Returns a property of a point of sale by id.",
                "operationId": "getPointOfSaleProperty",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the point of sale",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "property",
                        "in": "path",
                        "description": "Property of the point of sale",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Point of sale not found"
                    },
                    "400": {
                        "description": "Invalid property value"
                    }
                }
            },
            "put": {
                "tags": [
                    "POS"
                ],
                "summary": "Update a property of a point of sale by id.",
                "description": "Update a property of a  point of sale by id.",
                "operationId": "getPointOfSaleProperty",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the point of sale",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "property",
                        "in": "path",
                        "description": "Property of the point of sale.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "in": "body",
                        "description": "Request body in JSON, specifies a new property value",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/inputProperty"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Point of sale succesfully updated"
                    },
                    "404": {
                        "description": "Point of sale not found"
                    },
                    "400": {
                        "description": "Invalid property value"
                    },
                    "409": {
                        "description": "Property is guarded"
                    }
                }
            }
        },
        "/products": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Returns all products.",
                "description": "Returns all products.",
                "operationId": "getAllProducts",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "Product"
                ],
                "summary": "Create a new product.",
                "description": "Create a new product.",
                "operationId": "createProduct",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Product",
                        "in": "body",
                        "description": "Model of the product to store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/inputProduct"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Product invalid."
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Returns product by id.",
                "description": "Returns a product with a specified id.",
                "operationId": "getProduct",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the product",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Product"
                ],
                "summary": "Updates a product by id.",
                "description": "Updates the product.",
                "operationId": "updateProduct",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "path",
                        "description": "Request body in JSON.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the product",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product succesfully updated"
                    },
                    "400": {
                        "description": "Product not valid"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Product"
                ],
                "summary": "Delete a product by id.",
                "description": "Delete a product by id.",
                "operationId": "deleteProduct",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the product",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product succesfully deleted."
                    },
                    "404": {
                        "description": "Product not found."
                    }
                }
            }
        },
        "/products/{id}/reinstate": {
            "put": {
                "tags": [
                    "Product"
                ],
                "summary": "Reinstate a product by id.",
                "description": "Reinstate a product by id.",
                "operationId": "reinstateProduct",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the product",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product succesfully reinstated"
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "409": {
                        "description": "Product already active"
                    }
                }
            }
        },
        "/products/{id}/{property}": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Returns a property of a product by id.",
                "description": "Returns a property of a product by id.",
                "operationId": "getProductProperty",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the product",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "property",
                        "in": "path",
                        "description": "Property of the product",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Product"
                ],
                "summary": "Update a property of a product by id.",
                "description": "Update a property of a product by id.",
                "operationId": "getProductProperty",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the product",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "property",
                        "in": "path",
                        "description": "Property of the product",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "in": "body",
                        "description": "Request in JSON",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/inputProperty"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product succesfully updated"
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "400": {
                        "description": "Invalid property value"
                    },
                    "409": {
                        "description": "Property is guarded"
                    }
                }
            }
        },
        "/storages": {
            "get": {
                "tags": [
                    "storage"
                ],
                "summary": "Returns all storages.",
                "description": "Returns all storages.",
                "operationId": "getAllStorages",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            },
            "post": {
                "tags": [
                    "storage"
                ],
                "summary": "Create a new storage.",
                "description": "Create a new storage.",
                "operationId": "createStorage",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "storage",
                        "in": "body",
                        "description": "Model of the storage to store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/inputStorage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Storage invalid."
                    }
                }
            }
        },
        "/storages/{id}": {
            "get": {
                "tags": [
                    "storage"
                ],
                "summary": "Returns storage by id.",
                "description": "Returns a storage with a specified id.",
                "operationId": "getStorage",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the storage",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Storage not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "storage"
                ],
                "summary": "Updates a storage by id.",
                "description": "Updates the storage.",
                "operationId": "updateStorage",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "path",
                        "description": "Request body in JSON.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the storage",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Storage succesfully deleted"
                    },
                    "400": {
                        "description": "Storage not valid"
                    },
                    "404": {
                        "description": "Storage not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "storage"
                ],
                "summary": "Delete a storage by id.",
                "description": "Delete a storage by id.",
                "operationId": "deleteStorage",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the storage",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Storage succesfully deleted."
                    },
                    "404": {
                        "description": "Storage not found."
                    }
                }
            }
        },
        "/storages/{id}/reinstate": {
            "put": {
                "tags": [
                    "storage"
                ],
                "summary": "Reinstate a storage by id.",
                "description": "Reinstate a storage by id.",
                "operationId": "reinstateStorage",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the storage",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Storage succesfully reinstated"
                    },
                    "404": {
                        "description": "Storage not found"
                    },
                    "409": {
                        "description": "Storage already active."
                    }
                }
            }
        },
        "/storages/{id}/{property}": {
            "get": {
                "tags": [
                    "storage"
                ],
                "summary": "Returns a property of a storage by id.",
                "description": "Returns a property of a storage by id.",
                "operationId": "getStorageProperty",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the storage",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "property",
                        "in": "path",
                        "description": "Property of the storage",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Storage or Property not found, see message body"
                    }
                }
            },
            "put": {
                "tags": [
                    "storage"
                ],
                "summary": "Update a property of a storage by id.",
                "description": "Update a property of a storage by id.",
                "operationId": "getStorageProperty",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the storage",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "path",
                        "description": "Request body in JSON",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "property",
                        "in": "path",
                        "description": "Property of the storage",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Storage succesfully updated"
                    },
                    "404": {
                        "description": "Storage or Property not found, see message body"
                    },
                    "400": {
                        "description": "Invalid property value"
                    }
                }
            }
        },
        "/storages/{id}/stores": {
            "get": {
                "tags": [
                    "storage"
                ],
                "summary": "Returns all products in a storage by id.",
                "description": "Returns all products in a storage by id.",
                "operationId": "getStorageProducts",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the storage",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Storage not found"
                    }
                }
            }
        },
        "/storages/{storage_id}/stock/{product_id}": {
            "get": {
                "tags": [
                    "storage"
                ],
                "summary": "Returns stock of a product in a storage by id.",
                "description": "Returns stock of a product in a storage by id.",
                "operationId": "getStorageStockOfProducts",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "storage_id",
                        "in": "path",
                        "description": "Id of the storage",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "product_id",
                        "in": "path",
                        "description": "Id of the product",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "path",
                        "description": "Request body in JSON",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Storage or relation between storage and product not found, see message body"
                    }
                }
            },
            "put": {
                "tags": [
                    "storage"
                ],
                "summary": "Sets the stock of a product in a storage by id.",
                "description": "Sets the stock of a product in a storage by id.",
                "operationId": "putStorageStockOfProducts",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "storage_id",
                        "in": "path",
                        "description": "Id of the storage",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "product_id",
                        "in": "path",
                        "description": "Id of the product",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "stock",
                        "in": "body",
                        "description": "Id of the product",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/inputProperty"
                        },
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Storage or Product or Relation between Storage and Product not found, see message body"
                    }
                }
            }
        },
        "/storages/{storage_id}/stores/{product_id}": {
            "post": {
                "tags": [
                    "storage"
                ],
                "summary": "Stores a product in a storage by id.",
                "description": "Stores a product in a storage by id.",
                "operationId": "putStorageStockOfProducts",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "storage_id",
                        "in": "path",
                        "description": "Id of the storage",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "product_id",
                        "in": "path",
                        "description": "Id of the product",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "stock",
                        "in": "body",
                        "description": "Id of the product",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/inputProperty"
                        },
                        "type": "integer"
                    },
                    {
                        "name": "request",
                        "in": "path",
                        "description": "Request body in JSON",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Storage or Product not found, see return message"
                    },
                    "400": {
                        "description": "Invalid stock property"
                    }
                }
            },
            "delete": {
                "tags": [
                    "storage"
                ],
                "summary": "Deletes a product in a storage by id.",
                "description": "Deletes a product in a storage by id.",
                "operationId": "deleteStorageProduct",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "storage_id",
                        "in": "path",
                        "description": "Id of the storage",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "product_id",
                        "in": "path",
                        "description": "Id of the product",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Storage or Relation between Storage and Product not found, see message body"
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Returns all transactions.",
                "description": "Returns all transactions, either within a certain range with the from and to parameter, or a certain number.",
                "operationId": "getAllTransactions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "from",
                        "in": "body",
                        "description": "Request in JSON, specifies the lower bound of the range of which all transactions are returned, default unix epoch",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/getAllTransaction"
                        }
                    },
                    {
                        "name": "to",
                        "in": "body",
                        "description": "Request in JSON, specifies the upper bound of the range of which all transactions are returned, default today",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/getAllTransaction"
                        }
                    },
                    {
                        "name": "amount",
                        "in": "body",
                        "description": "Request in JSON, number of transactions in the range to be returned",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/getAllTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Not a valid request, see message body"
                    }
                }
            },
            "post": {
                "tags": [
                    "transaction"
                ],
                "summary": "Create a new transaction.",
                "description": "Create a new transaction.",
                "operationId": "createTransaction",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "transaction",
                        "in": "body",
                        "description": "Model of the transaction to store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/inputTransaction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Transaction invalid."
                    }
                }
            }
        },
        "/transactions/user": {
            "get": {
                "tags": [
                    "Transaction"
                ],
                "summary": "Returns all transactions of a single user.",
                "description": "Returns all transactions of a single user, either within a certain range with the from and to parameter, or a certain number.",
                "operationId": "getAllTransactionsOfUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "from",
                        "in": "body",
                        "description": "Request in JSON, specifies the lower bound of the range of which all transactions are returned, default unix epoch",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/getAllTransactionUser"
                        }
                    },
                    {
                        "name": "to",
                        "in": "body",
                        "description": "Request in JSON, specifies the upper bound of the range of which all transactions are returned, default today",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/getAllTransactionUser"
                        }
                    },
                    {
                        "name": "amount",
                        "in": "body",
                        "description": "Request in JSON, number of transactions in the range to be returned",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/getAllTransactionUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Not a valid request, see message body"
                    },
                    "404": {
                        "description": "UserID has not made any transaction, userID not found in table Transactions"
                    }
                }
            }
        },
        "/transactions/{id}": {
            "get": {
                "tags": [
                    "transaction"
                ],
                "summary": "Returns transaction by id.",
                "description": "Returns a transaction with a specified id.",
                "operationId": "getTransaction",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the transaction",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "transaction"
                ],
                "summary": "Updates a transaction by id.",
                "description": "Updates the transaction.",
                "operationId": "updateTransaction",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "path",
                        "description": "Request body in JSON.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the transaction",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Transaction succesfully deleted"
                    },
                    "400": {
                        "description": "Transaction not valid"
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "transaction"
                ],
                "summary": "Delete a transaction by id.",
                "description": "Delete a transaction by id.",
                "operationId": "deleteTransaction",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the transaction",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction succesfully deleted."
                    },
                    "404": {
                        "description": "Transaction not found."
                    }
                }
            }
        },
        "/transactions/activity/{id}": {
            "get": {
                "tags": [
                    "transaction"
                ],
                "summary": "Returns transaction by activity id.",
                "description": "Returns transactions with a specified activity id.",
                "operationId": "getByActivity",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the activity",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Activity not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "PointOfSale": {
            "required": [
                "id",
                "owner_id",
                "name"
            ],
            "properties": {
                "id": {
                    "description": "The id of the Point of Sale",
                    "type": "string"
                },
                "owner_id": {
                    "description": "Id of the owner from this Point of Sale",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the product",
                    "type": "string"
                },
                "created_at": {
                    "description": "Time of creation",
                    "type": "string",
                    "format": "date-time"
                },
                "updated_at": {
                    "description": "Time of last update",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted_at": {
                    "description": "Time of deletion (inactive)",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "inputPointOfSale": {
            "required": [
                "owner_id",
                "name"
            ],
            "properties": {
                "owner_id": {
                    "description": "Id of the owner from this Point of Sale",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the product",
                    "type": "string"
                }
            }
        },
        "inputProperty": {
            "required": [
                "value"
            ],
            "properties": {
                "value": {
                    "description": "Value of the property",
                    "type": "string"
                }
            }
        },
        "product": {
            "required": [
                "id",
                "name",
                "owner_id",
                "price",
                "tray_size",
                "category"
            ],
            "properties": {
                "id": {
                    "description": "The ID of the product",
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the product",
                    "type": "string"
                },
                "price": {
                    "description": "The price in cents",
                    "type": "integer"
                },
                "image": {
                    "description": "The image displaying the product",
                    "type": "string"
                },
                "tray_size": {
                    "description": "Number of products in a tray of the product",
                    "type": "integer"
                },
                "category": {
                    "description": "Category the product belongs to",
                    "type": "string",
                    "enum": [
                        "Drink",
                        "Food",
                        "Ticket",
                        "Other"
                    ]
                },
                "owner_id": {
                    "description": "ID of the owner from this product",
                    "type": "integer"
                },
                "created_at": {
                    "description": "Time of creation",
                    "type": "string",
                    "format": "date-time"
                },
                "updated_at": {
                    "description": "Time of last update",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted_at": {
                    "description": "Time of deletion (inactive)",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "inputProduct": {
            "required": [
                "id",
                "name",
                "owner_id",
                "price",
                "tray_size",
                "category"
            ],
            "properties": {
                "name": {
                    "description": "The name of the product",
                    "type": "string"
                },
                "price": {
                    "description": "The price in cents",
                    "type": "integer"
                },
                "image": {
                    "description": "The image displaying the product",
                    "type": "string"
                },
                "tray_size": {
                    "description": "Number of products in a tray of the product",
                    "type": "integer"
                },
                "owner_id": {
                    "description": "ID of the owner from this product",
                    "type": "string"
                },
                "category": {
                    "description": "Category the product belongs to",
                    "type": "string",
                    "default": "other",
                    "enum": [
                        "drink",
                        "food",
                        "ticket",
                        "other"
                    ]
                }
            }
        },
        "storages": {
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "id": {
                    "description": "The ID of the storage",
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the storage",
                    "type": "string"
                },
                "owner_id": {
                    "description": "ID of the owner from this storage",
                    "type": "integer"
                },
                "created_at": {
                    "description": "Time of creation",
                    "type": "string",
                    "format": "date-time"
                },
                "updated_at": {
                    "description": "Time of last update",
                    "type": "string",
                    "format": "date-time"
                },
                "deleted_at": {
                    "description": "Time of deletion (inactive)",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "inputStorage": {
            "required": [
                "id",
                "name"
            ],
            "properties": {
                "name": {
                    "description": "The name of the storage",
                    "type": "string"
                },
                "owner_id": {
                    "description": "ID of the owner from this storage",
                    "type": "string"
                }
            }
        },
        "getAllTransaction": {
            "required": [],
            "properties": {
                "from": {
                    "description": "The timestamp of the lower bound of the requested range.",
                    "type": "string"
                },
                "to": {
                    "description": "The timestamp of the upper bound of the requested range.",
                    "type": "string"
                },
                "amount": {
                    "description": "The number of recent transactions to be shown.",
                    "type": "integer"
                }
            }
        },
        "getAllTransactionUser": {
            "required": [],
            "properties": {
                "userID": {
                    "description": "The ID of the user of who the transactions are requested.",
                    "type": "string"
                },
                "from": {
                    "description": "The timestamp of the lower bound of the requested range.",
                    "type": "string"
                },
                "to": {
                    "description": "The timestamp of the upper bound of the requested range.",
                    "type": "string"
                },
                "amount": {
                    "description": "The number of recent transactions to be shown.",
                    "type": "integer"
                }
            }
        },
        "inputTransaction": {
            "required": [
                "sold_to_id",
                "authorized_id",
                "total_price",
                "activity_id",
                "comment",
                "subtransaction"
            ],
            "properties": {
                "sold_to_id": {
                    "description": "id of the person who bought the product.",
                    "type": "string"
                },
                "authorized_id": {
                    "description": "id of the person who authorized the transaction.",
                    "type": "string"
                },
                "total_price": {
                    "description": "Total price of the transaction.",
                    "type": "int"
                },
                "activity_id": {
                    "description": "The activity on which the transaction is made.",
                    "type": "string"
                },
                "comment": {
                    "description": "Comment which is set to a transaction.",
                    "type": "string"
                },
                "subtransaction": {
                    "description": "JSON array containing (multiple) subtransactions.",
                    "type": "array"
                }
            }
        }
    }
}